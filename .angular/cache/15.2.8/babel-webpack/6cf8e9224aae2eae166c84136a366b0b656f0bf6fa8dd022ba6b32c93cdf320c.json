{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = [];\n    this.getCartFromLocalStorage();\n  }\n  getCartFromLocalStorage() {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      this.cart = JSON.parse(storedCart);\n    }\n  }\n  saveCartToLocalStorage() {\n    localStorage.setItem('cart', JSON.stringify(this.cart));\n  }\n  addToCart(productToAdd, selectedSize, quantity) {\n    const existingProductIndex = this.cart.findIndex(item => item.product.title === productToAdd.title && item.size === selectedSize);\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity += quantity;\n    } else {\n      this.cart.push({\n        product: productToAdd,\n        size: selectedSize,\n        quantity\n      });\n    }\n    this.saveCartToLocalStorage();\n  }\n  getPriceForItem(item) {\n    if (item.size === null || item.product.size === undefined) {\n      return item.product.price[0];\n    }\n    return item.product.price[item.product.size?.indexOf(item.size) || 0];\n  }\n  getTotalPrice() {\n    return this.cart.reduce((total, item) => {\n      const itemPrice = this.getPriceForItem(item);\n      return total + itemPrice * item.quantity;\n    }, 0);\n  }\n  increaseQuantity(product, size) {\n    const existingProductIndex = this.cart.findIndex(item => item.product.title === product.title && item.size === size);\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity += 1;\n      this.saveCartToLocalStorage();\n    }\n  }\n  decreaseQuantity(product, size) {\n    const existingProductIndex = this.cart.findIndex(item => item.product.title === product.title && item.size === size);\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity -= 1;\n      if (this.cart[existingProductIndex].quantity <= 0) {\n        this.cart.splice(existingProductIndex, 1);\n      }\n      this.saveCartToLocalStorage();\n    }\n  }\n  removeFromCart(product, size) {\n    const existingProductIndex = this.cart.findIndex(item => item.product.title === product.title && item.size === size);\n    if (existingProductIndex >= 0) {\n      this.cart.splice(existingProductIndex, 1);\n      this.saveCartToLocalStorage();\n    }\n  }\n  clearCart() {\n    this.cart = [];\n    localStorage.removeItem('cart');\n  }\n  getCart() {\n    return this.cart;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,WAAW;EAGtBC;IAFQ,SAAI,GAAkE,EAAE;IAG9E,IAAI,CAACC,uBAAuB,EAAE;EAChC;EAEQA,uBAAuB;IAC7B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI,CAACG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;;EAEtC;EAEQM,sBAAsB;IAC5BL,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACL,IAAI,CAAC,CAAC;EACzD;EAEAM,SAAS,CAACC,YAAqB,EAAEC,YAA2B,EAAEC,QAAgB;IAC5E,MAAMC,oBAAoB,GAAG,IAAI,CAACV,IAAI,CAACW,SAAS,CAC3CC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACC,KAAK,KAAKP,YAAY,CAACO,KAAK,IAAIF,IAAI,CAACG,IAAI,KAAKP,YAAY,CACpF;IAED,IAAIE,oBAAoB,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACV,IAAI,CAACU,oBAAoB,CAAC,CAACD,QAAQ,IAAIA,QAAQ;KACrD,MACI;MACH,IAAI,CAACT,IAAI,CAACgB,IAAI,CAAC;QAAEH,OAAO,EAAEN,YAAY;QAAEQ,IAAI,EAAEP,YAAY;QAAEC;MAAQ,CAAE,CAAC;;IAGzE,IAAI,CAACN,sBAAsB,EAAE;EAC/B;EAEAc,eAAe,CAACL,IAA+C;IAC7D,IAAIA,IAAI,CAACG,IAAI,KAAK,IAAI,IAAIH,IAAI,CAACC,OAAO,CAACE,IAAI,KAAKG,SAAS,EAAE;MACzD,OAAON,IAAI,CAACC,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC;;IAE9B,OAAOP,IAAI,CAACC,OAAO,CAACM,KAAK,CAACP,IAAI,CAACC,OAAO,CAACE,IAAI,EAAEK,OAAO,CAACR,IAAI,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;EACvE;EAIAM,aAAa;IACX,OAAO,IAAI,CAACrB,IAAI,CAACsB,MAAM,CAAC,CAACC,KAAK,EAAEX,IAAI,KAAI;MACtC,MAAMY,SAAS,GAAG,IAAI,CAACP,eAAe,CAACL,IAAI,CAAC;MAC5C,OAAOW,KAAK,GAAGC,SAAS,GAAGZ,IAAI,CAACH,QAAQ;IAC1C,CAAC,EAAE,CAAC,CAAC;EACP;EAEAgB,gBAAgB,CAACZ,OAAgB,EAAEE,IAAmB;IACpD,MAAML,oBAAoB,GAAG,IAAI,CAACV,IAAI,CAACW,SAAS,CAC3CC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACC,KAAK,KAAKD,OAAO,CAACC,KAAK,IAAIF,IAAI,CAACG,IAAI,KAAKA,IAAI,CACvE;IAED,IAAIL,oBAAoB,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACV,IAAI,CAACU,oBAAoB,CAAC,CAACD,QAAQ,IAAI,CAAC;MAC7C,IAAI,CAACN,sBAAsB,EAAE;;EAEjC;EAEAuB,gBAAgB,CAACb,OAAgB,EAAEE,IAAmB;IACpD,MAAML,oBAAoB,GAAG,IAAI,CAACV,IAAI,CAACW,SAAS,CAC3CC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACC,KAAK,KAAKD,OAAO,CAACC,KAAK,IAAIF,IAAI,CAACG,IAAI,KAAKA,IAAI,CACvE;IAED,IAAIL,oBAAoB,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACV,IAAI,CAACU,oBAAoB,CAAC,CAACD,QAAQ,IAAI,CAAC;MAE7C,IAAI,IAAI,CAACT,IAAI,CAACU,oBAAoB,CAAC,CAACD,QAAQ,IAAI,CAAC,EAAE;QACjD,IAAI,CAACT,IAAI,CAAC2B,MAAM,CAACjB,oBAAoB,EAAE,CAAC,CAAC;;MAE3C,IAAI,CAACP,sBAAsB,EAAE;;EAEjC;EAEAyB,cAAc,CAACf,OAAgB,EAAEE,IAAmB;IAClD,MAAML,oBAAoB,GAAG,IAAI,CAACV,IAAI,CAACW,SAAS,CAC3CC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACC,KAAK,KAAKD,OAAO,CAACC,KAAK,IAAIF,IAAI,CAACG,IAAI,KAAKA,IAAI,CACvE;IAED,IAAIL,oBAAoB,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACV,IAAI,CAAC2B,MAAM,CAACjB,oBAAoB,EAAE,CAAC,CAAC;MACzC,IAAI,CAACP,sBAAsB,EAAE;;EAEjC;EAEA0B,SAAS;IACP,IAAI,CAAC7B,IAAI,GAAG,EAAE;IACdF,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAC,OAAO;IACL,OAAO,IAAI,CAAC/B,IAAI;EAClB;;AA7FWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsC,SAAXtC,WAAW;EAAAuC,YAFV;AAAM","names":["CartService","constructor","getCartFromLocalStorage","storedCart","localStorage","getItem","cart","JSON","parse","saveCartToLocalStorage","setItem","stringify","addToCart","productToAdd","selectedSize","quantity","existingProductIndex","findIndex","item","product","title","size","push","getPriceForItem","undefined","price","indexOf","getTotalPrice","reduce","total","itemPrice","increaseQuantity","decreaseQuantity","splice","removeFromCart","clearCart","removeItem","getCart","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\fuc35\\OneDrive\\Documents\\TRAVAIL\\Angular\\Projet\\YnovAngular\\src\\app\\service\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart: { product: Product; size: string | null; quantity: number }[] = [];\n\n  constructor() {\n    this.getCartFromLocalStorage();\n  }\n\n  private getCartFromLocalStorage(): void {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      this.cart = JSON.parse(storedCart);\n    }\n  }\n\n  private saveCartToLocalStorage(): void {\n    localStorage.setItem('cart', JSON.stringify(this.cart));\n  }\n\n  addToCart(productToAdd: Product, selectedSize: string | null, quantity: number): void {\n    const existingProductIndex = this.cart.findIndex(\n        (item) => item.product.title === productToAdd.title && item.size === selectedSize\n    );\n\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity += quantity;\n    }\n    else {\n      this.cart.push({ product: productToAdd, size: selectedSize, quantity });\n    }\n\n    this.saveCartToLocalStorage();\n  }\n\n  getPriceForItem(item: { product: Product; size: string | null }): number {\n    if (item.size === null || item.product.size === undefined) {\n      return item.product.price[0];\n    }\n    return item.product.price[item.product.size?.indexOf(item.size) || 0];\n  }\n\n\n\n  getTotalPrice(): number {\n    return this.cart.reduce((total, item) => {\n      const itemPrice = this.getPriceForItem(item);\n      return total + itemPrice * item.quantity;\n    }, 0);\n  }\n\n  increaseQuantity(product: Product, size: string | null): void {\n    const existingProductIndex = this.cart.findIndex(\n        (item) => item.product.title === product.title && item.size === size\n    );\n\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity += 1;\n      this.saveCartToLocalStorage();\n    }\n  }\n\n  decreaseQuantity(product: Product, size: string | null): void {\n    const existingProductIndex = this.cart.findIndex(\n        (item) => item.product.title === product.title && item.size === size\n    );\n\n    if (existingProductIndex >= 0) {\n      this.cart[existingProductIndex].quantity -= 1;\n\n      if (this.cart[existingProductIndex].quantity <= 0) {\n        this.cart.splice(existingProductIndex, 1);\n      }\n      this.saveCartToLocalStorage();\n    }\n  }\n\n  removeFromCart(product: Product, size: string | null): void {\n    const existingProductIndex = this.cart.findIndex(\n        (item) => item.product.title === product.title && item.size === size\n    );\n\n    if (existingProductIndex >= 0) {\n      this.cart.splice(existingProductIndex, 1);\n      this.saveCartToLocalStorage();\n    }\n  }\n\n  clearCart(): void {\n    this.cart = [];\n    localStorage.removeItem('cart');\n  }\n\n  getCart(): { product: Product; size: string | null; quantity: number }[] {\n    return this.cart;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}